basePath: /v1
definitions:
  application.JSONBadResponse:
    properties:
      code:
        example: 40001
        type: integer
      message:
        example: 4xx errors
        type: string
    type: object
  application.JSONSuccessResponse:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: Ok
        type: string
    type: object
  controller.AlarmListResponse:
    properties:
      alarms:
        items:
          $ref: '#/definitions/controller.responseAlarm'
        type: array
    type: object
  controller.TokenRefreshRequest:
    properties:
      refreshToken:
        type: string
    type: object
  controller.TokenRequest:
    properties:
      authCode:
        type: string
      deviceToken:
        type: string
    type: object
  controller.detailResponseRoom:
    properties:
      code:
        type: string
      createdAt:
        type: string
      hint:
        type: string
      id:
        type: integer
      isMaster:
        type: boolean
      members:
        items:
          $ref: '#/definitions/controller.responseMember'
        type: array
      name:
        type: string
      period:
        type: integer
      theme:
        type: string
      turnAccountId:
        type: integer
      updatedAt:
        type: string
    type: object
  controller.filePostResponse:
    properties:
      audioDownloadURL:
        type: string
      audioURL:
        type: string
      photoDownloadURL:
        type: string
      photoURL:
        type: string
    type: object
  controller.listResponseRoom:
    properties:
      rooms:
        items:
          $ref: '#/definitions/controller.responseRoom'
        type: array
    type: object
  controller.memberRequest:
    properties:
      alarm_flag:
        type: boolean
      auth_type:
        type: string
      email:
        type: string
      name:
        type: string
      profile_url:
        type: string
    type: object
  controller.memberResponse:
    properties:
      alarm_flag:
        type: boolean
      auth_type:
        type: string
      email:
        type: string
      name:
        type: string
      profile_url:
        type: string
    type: object
  controller.mockMemberRequest:
    properties:
      deviceToken:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  controller.mockMemberResponse:
    properties:
      accessToken:
        type: string
      authCode:
        type: string
      refreshToken:
        type: string
    type: object
  controller.patchRequestRoom:
    properties:
      code:
        type: string
      hint:
        type: string
      orders:
        items:
          type: integer
        type: array
      period:
        type: integer
    type: object
  controller.patchResponseRoom:
    properties:
      roomId:
        type: integer
    type: object
  controller.postRequestRoom:
    properties:
      code:
        example: 제민욱
        type: string
      hint:
        example: 레오의 본명은?
        type: string
      name:
        example: 고영희방
        type: string
      period:
        example: 5
        type: integer
      theme:
        example: "1"
        type: string
    type: object
  controller.postResponseRoom:
    properties:
      roomId:
        type: integer
    type: object
  controller.responseAlarm:
    properties:
      alarmAt:
        type: string
      author:
        type: string
      code:
        type: string
      roomName:
        type: string
      title:
        type: string
    type: object
  controller.responseMember:
    properties:
      id:
        type: integer
      nickName:
        type: string
      profileUrl:
        type: string
    type: object
  controller.responseRoom:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      members:
        items:
          $ref: '#/definitions/controller.responseMember'
        type: array
      name:
        type: string
      orders:
        items:
          type: integer
        type: array
      updatedAt:
        type: string
    type: object
  controller.roomOrderResponse:
    properties:
      members:
        items:
          $ref: '#/definitions/controller.responseMember'
        type: array
      turnAccountId:
        type: integer
    type: object
  controller.taskRequest:
    properties:
      code:
        enum:
        - ROOM_PERIOD_FIN
        - MEMBER_ON_DUTY
        - MEMBER_BEFORE_1HR
        - MEMBER_BEFORE_4HR
        - MEMBER_POSTED_DIARY
        type: string
      email:
        type: string
      room_id:
        type: integer
    type: object
  controller.tokenResponse:
    properties:
      accesstoken:
        type: string
      refreshToken:
        type: string
    type: object
  controller.verifyRequestRoom:
    properties:
      code:
        type: string
    type: object
host: exchange-diary-b4mzhzbzcq-du.a.run.app
info:
  contact:
    email: minkj1992@gmail.com
    name: API Support
    url: https://minkj1992.github.io
  description: This is a voda api server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Voice Of Diary API (voda)
  version: "1.0"
paths:
  /alarms:
    get:
      consumes:
      - application/json
      description: |-
        현재 로그인한 사용자의 알람 리스트
        * 교환일기 방의 주기에 따라 알람은 삭제된다. 즉 턴이 변경되면 알림들 제거 된다.
        * 실제 구현은 알람 생성 시 (room & member * code)유니크 검사를 통해서 중복 되는 알림코드는 제거 함으로써, 알람 row 숫자를 관리한다.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.AlarmListResponse'
        "400":
          description: ""
        "401":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: List alarms
      tags:
      - alarms
  /authentication/login/{auth_type}:
    get:
      consumes:
      - application/json
      description: |-
        해당 auth_type의 login form을 기입 후, redirect되는 곳으로 기입한 email 그리고 요청한 auth_type에 대한 auth code를 발급한다.
        클라이언트 URL에 query string으로 auth code가 담긴 채로 redirect하여 로그인 및 회원가입이 진행되도록 한다.
      parameters:
      - description: kakao | google | apple
        in: path
        name: auth_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "301":
          description: ""
        "400":
          description: ""
        "500":
          description: ""
      summary: Login
      tags:
      - auth
  /authentication/mock:
    post:
      consumes:
      - application/json
      description: |-
        클라 테스트용. 주어진 email이 db에 없으면 회원가입 프로세스 동시에 진행
        AccessToken을 사용해서 헤더에 {"Authorization": AccessToken} 넣어주면 된다.
      parameters:
      - description: 모킹할 유저정보
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/controller.mockMemberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.mockMemberResponse'
        "400":
          description: ""
        "500":
          description: ""
      summary: (debug) mock login / register
      tags:
      - auth
  /login/{auth_type}:
    get:
      consumes:
      - application/json
      description: 요청한 auth_type의 login form URL로 redirect됩니다.
      parameters:
      - description: kakao | google | apple
        in: path
        name: auth_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "301":
          description: ""
        "400":
          description: ""
        "500":
          description: ""
      summary: LoginForm Redirect
      tags:
      - auth
  /member:
    patch:
      consumes:
      - application/json
      description: 해당 member를 수정한다.
      parameters:
      - description: member 수정 요청 body
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/controller.memberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.memberResponse'
        "400":
          description: ""
        "500":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Member 수정
      tags:
      - members
    post:
      consumes:
      - application/json
      description: member를 새로 생성한다.
      parameters:
      - description: member 생성 요청 body
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/controller.memberRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.memberResponse'
        "400":
          description: ""
        "500":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Member 생성
      tags:
      - members
  /member/{email}:
    delete:
      consumes:
      - application/json
      description: 해당 member를 삭제한다.
      parameters:
      - description: 사용자 이메일
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: ""
        "500":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Member 삭제
      tags:
      - members
    get:
      consumes:
      - application/json
      description: email 주소를 통해 가입된 member를 조회한다.
      parameters:
      - description: 사용자 이메일
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.memberResponse'
        "400":
          description: ""
        "500":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Member 조회
      tags:
      - members
  /member/verify:
    get:
      consumes:
      - application/json
      description: 닉네임이 중복인지 아닌지 검사한다.
      parameters:
      - description: nick name to verify
        in: query
        name: nickname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "400":
          description: ""
        "500":
          description: ""
      summary: Member 닉네임 중복 검사
      tags:
      - members
  /rooms:
    get:
      consumes:
      - application/json
      description: 참여중인 교환일기방 리스트
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/application.JSONSuccessResponse'
            - properties:
                code:
                  type: integer
                data:
                  $ref: '#/definitions/controller.listResponseRoom'
                message:
                  type: string
              type: object
        "400101":
          description: 엔티티낫파운드
          schema:
            allOf:
            - $ref: '#/definitions/application.JSONBadResponse'
            - properties:
                code:
                  type: integer
                message:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: List rooms
      tags:
      - rooms
    post:
      consumes:
      - application/json
      description: 교환일기방 생성
      parameters:
      - description: 교환일기방 생성요청 body
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.postRequestRoom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.postResponseRoom'
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: create a room
      tags:
      - rooms
  /rooms/{id}:
    delete:
      consumes:
      - application/json
      description: 교환일기방 삭제
      parameters:
      - description: 교환일기방 ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: (debug only) delete a room
      tags:
      - rooms
    get:
      consumes:
      - application/json
      description: |-
        교환일기방 상세
        members는 교환일기방에 참여한 순서로 정렬된다.
      parameters:
      - description: 교환일기방 ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.detailResponseRoom'
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: get a room
      tags:
      - rooms
    patch:
      consumes:
      - application/json
      description: |-
        교환일기방 업데이트 (master only)
        1. 작성주기 변경 (period)
        2. 코드/힌트 변경 (code, hint)
        3. 작성순서 변경(orders) : member id를 array로 넣어주면 된다.
      parameters:
      - description: 교환일기방 ID
        in: path
        name: id
        required: true
        type: integer
      - description: 교환일기방 수정 요청 body
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.patchRequestRoom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.patchResponseRoom'
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: update a room
      tags:
      - rooms
  /rooms/{id}/join:
    post:
      consumes:
      - application/json
      description: 교환일기방 참여코드 체크 후, 교환일기방 멤버로 추가
      parameters:
      - description: 교환일기방 ID
        in: path
        name: id
        required: true
        type: integer
      - description: 교환일기방 참여 요청 body
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.verifyRequestRoom'
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: ""
        "401":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: join a room
      tags:
      - rooms
  /rooms/{id}/leave:
    delete:
      consumes:
      - application/json
      description: |-
        교환일기방 나가기
        1. 교환일기방 마스터일 경우
        2. 교환일기방 멤버일 경우
      parameters:
      - description: 교환일기방 ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: leave a room
      tags:
      - rooms
  /rooms/{id}/orders:
    get:
      consumes:
      - application/json
      description: |-
        교환일기방 작성 순서
        orders는 교환일기방의 다이어리 작성 순서로 정렬된다.
      parameters:
      - description: 교환일기방 ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.roomOrderResponse'
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Get room orders
      tags:
      - rooms
  /rooms/{room_id}/files:
    post:
      consumes:
      - multipart/form-data
      description: 파일 업로드
      parameters:
      - description: Room ID
        in: path
        name: room_id
        required: true
        type: integer
      - example: "1.5"
        in: formData
        name: audioPitch
        type: string
      - example: LastDayOnEarth
        in: formData
        name: audioTitle
        type: string
      - example: ad5bb198-942f-4ddf-a248-3aaa4bba3b9b
        in: formData
        name: audioUUID
        type: string
      - example: e4947e0c-490b-4588-a14d-e74dd3b8371f
        in: formData
        name: photoUUID
        type: string
      - description: photo
        in: formData
        name: photo
        type: file
      - description: audio
        in: formData
        name: audio
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.filePostResponse'
        "400":
          description: ""
        "500":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: upload static files
      tags:
      - files
  /tasks/callback:
    post:
      consumes:
      - application/json
      description: google cloud task에 예약 해두었던, task들을 스케쥴된 일정시간이 지난뒤, 처리해주는 callback
        handler api endpoint.
      parameters:
      - description: Task Http Body
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/controller.taskRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted. It ignore request, because error occured. 정상 처리(204)와
            차이점을 두기 위해서 202로 처리함
        "204":
          description: successfully finished callback task.
      summary: Handle Event Task
      tags:
      - tasks
  /tasks/mock:
    post:
      consumes:
      - application/json
      parameters:
      - description: Task Http Body
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/controller.taskRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted. It ignore request, because error occured. 정상 처리(204)와
            차이점을 두기 위해서 202로 처리함
        "204":
          description: successfully finished callback task.
      summary: Mock Handle Event Task
      tags:
      - tasks
  /token:
    post:
      consumes:
      - application/json
      description: AuthCode를 전달하여, access & refresh 토큰을 발급 받는다.
      parameters:
      - description: 발급받은 AuthCode
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.tokenResponse'
        "400":
          description: ""
        "500":
          description: ""
      summary: JWT 토큰 발급
      tags:
      - auth
  /token/refresh:
    get:
      consumes:
      - application/json
      description: refresh token을 전달하여, accessToken을 재발급받는다.
      parameters:
      - description: refresh 토큰
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.TokenRefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.tokenResponse'
        "400":
          description: ""
        "500":
          description: ""
      summary: AccessToken 재발급
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
